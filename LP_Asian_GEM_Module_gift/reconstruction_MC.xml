<marlin>
<!--##########################################
    #                                        #
    #     steering file for reconstruction   #
    #                                        #
    ##########################################-->

 <execute>
  <processor name="MyAIDAProcessor"/>
  <processor name="MyConditionsProcessor"/>
  <processor name="MyTrackerRawDataToDataConverterProcessor"/>
  <processor name="MyADCPulseConverterProcessor"/>
  <processor name="MyChannelMappingProcessor"/>
  <processor name="MyHitTrackFinderTopoProcessor"/>
  <processor name="MyTrackSeederProcessor"/>
  <processor name="MyTrackFitterKalmanProcessor"/>
  <processor name="MyLCIOOutputProcessor"/>  
 </execute>

 <global>
  <!--parameter name="LCIOInputFiles"> readout-7049_0.slcio </parameter-->
  <parameter name="LCIOInputFiles"> TPCRawData.slcio </parameter>
  <!-- limit the number of processed records (run+evt): -->  
  <parameter name="MaxRecordNumber" value="1001" />  
  <parameter name="SkipNEvents" value="0" />  
  <parameter name="SupressCheck" value="false" />  
  <parameter name="GearXMLFile"> gear_LP_TPC_GEM_7module.xml </parameter>
  <parameter name="Verbosity" options="DEBUG0-4,MESSAGE0-4,WARNING0-4,ERROR0-4,SILENT"> DEBUG  </parameter> 
 </global>

 <processor name="MyLCIOOutputProcessor" type="LCIOOutputProcessor">
 <!--Writes the current event to the specified LCIO outputfile. Needs to be the last ActiveProcessor.-->
  <!--drops the named collections from the event-->
  <!--parameter name="DropCollectionNames" type="StringVec">TPCHits HCalHits  </parameter-->
  <!--drops all collections of the given type from the event-->
  <!--parameter name="DropCollectionTypes" type="StringVec">SimTrackerHit SimCalorimeterHit  </parameter-->
  <!-- write complete objects in subset collections to the file (i.e. ignore subset flag)-->
  <!--parameter name="FullSubsetCollections" type="StringVec">MCParticlesSkimmed  </parameter-->
  <!--force keep of the named collections - overrules DropCollectionTypes (and DropCollectionNames)-->
  <!--parameter name="KeepCollectionNames" type="StringVec">MyPreciousSimTrackerHits  </parameter-->
  <!-- name of output file -->
  <parameter name="LCIOOutputFile" type="string">test_out.slcio </parameter>
  <!--write mode for output file:  WRITE_APPEND or WRITE_NEW-->
  <parameter name="LCIOWriteMode" type="string"> WRITE_NEW </parameter>
  <!--will split output file if size in kB exceeds given value - doesn't work with APPEND and NEW-->
  <!--parameter name="SplitFileSizekB" type="int">1992294 </parameter-->
</processor>

 <processor name="MyAIDAProcessor" type="AIDAProcessor">
 <!--Processor that handles AIDA files. Creates on directory per processor.  Processors only need to create and fill the histograms, clouds and tuples. Needs to be the first ActiveProcessor-->
  <!-- compression of output file 0: false >0: true (default) -->
  <parameter name="Compress" type="int">1 </parameter>
  <!-- filename without extension-->
  <parameter name="FileName" type="string">aida_file_7GEM </parameter>
  <!-- type of output file xml (default) or root ( only OpenScientist)-->
  <parameter name="FileType" type="string"> root  </parameter>
</processor>

 <processor name="MyConditionsProcessor" type="ConditionsProcessor">
 <!--ConditionsProcessor provides access to conditions data  transparently from LCIO files or a databases, using LCCD-->
  <!--Initialization of a conditions database handler-->
  <!--parameter name="DBCondHandler" type="StringVec">conditionsName /lccd/myfolder HEAD  </parameter-->
  <!--Initialization of a conditions db file handler-->
  <!--parameter name="DBFileHandler" type="StringVec">conditionsName conditions.slcio collectionName  </parameter-->
  <!--Initialization string for conditions database-->
  <!--<parameter name="DBInit" type="string">localhost:lccd_test:calvin:hobbes </parameter>-->
  <parameter name="DBInit" type="string" value="localhost:lccd_test:calvin:hobbes"/>
  <!--Initialization of a data file handler-->
  <!--parameter name="DataFileHandler" type="StringVec"> TPCConditions  </parameter-->
  <parameter name="DataFileHandler" type="StringVec"> TPCPedestal TPCChannelMapping </parameter>
  <!--Initialization of a simple conditions file handler-->
  <!--
  <parameter name="SimpleFileHandler" type="StringVec">TPCChannelMapping TPCChannelMapping_090324_7GEM.slcio TPCChannelMapping  </parameter>
  -->
  <!--parameter name="SimpleFileHandler" type="StringVec">TPCPedestal Conditions.slcio TPCPedestal  </parameter-->
  <!--parameter name="SimpleFileHandler" type="StringVec">TPCConditions Conditions.slcio TPCConditions  </parameter-->
</processor>

 <processor name="MyTrackerRawDataToDataConverterProcessor" type="TrackerRawDataToDataConverterProcessor">
 <!--TrackerRawDataToDataConverterProcessor converts the TrackerRawData to TrackerData without processing the values-->
  <!--Name of the input collection-->
  <parameter name="InputCollectionName" type="string" lcioInType="TrackerRawData">TPCRawData </parameter>
  <!--Name of the output collection-->
  <parameter name="OutputCollectionName" type="string" lcioOutType="TrackerData">TPCData </parameter>
  <!--if not 0 the output collection is set transient-->
  <parameter name="SetOutputTransient" type="bool">false </parameter>
</processor>

 <processor name="MyADCPulseConverterProcessor" type="ADCPulseConverterProcessor">
 <!--ADCPulseConverterProcessor:  Convert zero-suppressed ADC raw data to pulses-->
  <!--if not 0 the ADC spectrum will be stored for all pulses-->
  <parameter name="ForceSpectrumSave" type="int">1 </parameter>
  <!--Name of the input TrackerData collection-->
  <parameter name="InputCollectionName" type="string" lcioInType="TrackerData">TPCData </parameter>
  <!--Name of the output TrackerPulse collection-->
  <parameter name="OutputTrackerPulseCollectionName" type="string" lcioOutType="TrackerPulse">TPCPulses </parameter>
  <!--if not 0 the output collection is set transient-->
  <parameter name="SetOutputTransient" type="int">0 </parameter>
</processor>

 <processor name="MyChannelMappingProcessor" type="ChannelMappingProcessor">
 <!--ChannelMappingProcessor changes cellID0 to map from hardware channel numbers to sowftware/logical channel numbers.-->
  <!--Name of the input collection-->
  <parameter name="InputCollectionName" type="string" lcioInType="TrackerPulse"> TPCPulses </parameter>
  <!--Name of the collection with the mapping-->
  <parameter name="ChannelMappingCollectionName" type="string" value="TPCChannelMapping"/>
  <!--Optional: Name of output collection-->
  <parameter name="OutputCollectionName" type="string" value="TPCPulsesMapped"/>
  <!--if not 0 the output collection is set transient (only if OutputCollectionName defined)-->
  <parameter name="SetOutputTransient" type="int" value="0"/>
</processor>

 <processor name="MyHitTrackFinderTopoProcessor" type="HitTrackFinderTopoProcessor">
 <!--HitTrackFinderTopoProcessor calculates TrackerHits from TrackerPulses-->
  <!--Optional: Name of the input collection containing the TPC conditions data-->
  <!--parameter name="InputTPCConditions" type="string">TPCConditions </parameter-->
  <!--Name of the input TrackerPulses collection-->
  <parameter name="InputTrackerPulses" type="string" lcioInType="TrackerPulse">TPCPulses </parameter>
  <!--Maximum number of empty consecuitve pads in hit (default: 1)-->
  <parameter name="MaxEmptyPads" type="int">1 </parameter>
  <!--Maximum number of subsequnetly missing hits (default: 1)-->
  <parameter name="MaxSkipRows" type="int">1 </parameter>
  <!--Maximum time between pulses in a hit in ns (default: 200.)-->
  <parameter name="MaxTimeSpread" type="float">200 </parameter>
  <!--Minimum size of hit / Minimum number of Pads (default: 1)-->
  <parameter name="MinHitSize" type="int">2 </parameter>
  <!--Minimum number of hits on track (default: 5)-->
  <parameter name="MinTrackHits" type="int">5 </parameter>
  <!--Set to 1 for the second half TPC, which look into the negative z direction (default: 0)-->
  <parameter name="NegativeZDirection" type="int">0 </parameter>
  <!--Name of the output Tracks collection-->
  <parameter name="OutputTrackCandidates" type="string" lcioOutType="Track">TPCTrackCandidates </parameter>
  <!--Name of the output TrackerHits collection-->
  <parameter name="OutputTrackerHits" type="string" lcioOutType="TrackerHit">TPCHits </parameter>
  <!--if not 0 the output hits collection is set transient (default: 0)-->
  <parameter name="SetOutputHitsTransient" type="int">0 </parameter>
  <!--if not 0 the output trackscollection is set transient (default: 0)-->
  <parameter name="SetOutputTrackCandidatesTransient" type="int">0 </parameter>
  <!--Optional: Set drift velocity in case there is no conditions data in mm/us-->
  <parameter name="VDriftOverride" type="float">44.8 </parameter>
</processor>

 <processor name="MyTrackSeederProcessor" type="TrackSeederProcessor">
 <!--Calculates seed track parameters from  in the TrackerHits in the track candidates collection!-->
  <!--The the name of the input collection of track candidates (default: TPCTrackCandidates)-->
  <parameter name="InputTrackCandidates" type="string" lcioInType="Track">TPCTrackCandidates </parameter>
  <!--The name of the collection the seed tracks be stored under (default: TPCSeedTracks)-->
  <parameter name="OutputSeedTracks" type="string" lcioOutType="Track">TPCSeedTracks </parameter>
  <!--Controls whether tuples are produced for this processsor. Currently tuples are produced for the (s,z) location of a single track.-->
  <!--parameter name="ProduceSZTuples" type="bool">false </parameter-->
  <!--if not 0 the output hits collection is set transient (default: 0)-->
  <parameter name="SetOutputTransient" type="int">0 </parameter>
  <!--Name of the collection containing the TPC conditions-->
  <!--parameter name="TPCConditionsCollection" type="string">TPCConditions </parameter-->
</processor>

 <processor name="MyTrackFitterKalmanProcessor" type="TrackFitterKalmanProcessor">
 <!--Calculates seed track parameters from  in the TrackerHits in the track candidates collection!-->
  <!--The the name of the input collection of track candidates (default: TPCSeedTracks)-->
  <parameter name="InputSeedTracks" type="string" lcioInType="Track">TPCSeedTracks </parameter>
  <!--The name of the output collection with the fitted tracks(default: TPCTracks)-->
  <parameter name="OutputTracks" type="string" lcioOutType="Track">TPCTracks </parameter>
  <!--if not 0 the output hits collection is set transient (default: 0)-->
  <parameter name="SetOutputTransient" type="int">0 </parameter>
</processor>

</marlin>
